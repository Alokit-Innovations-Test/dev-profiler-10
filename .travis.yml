# Based on the "trust" template v0.1.2
# https://github.com/japaric/trust/tree/v0.1.2

dist: trusty
language: rust
services: docker
sudo: required

# TODO Rust builds on stable by default, this can be
# overridden on a case by case basis down below.

env:
  global:
    # TODO Update this to match the name of your project.
    - CRATE_NAME=trust

matrix:
  # TODO These are all the build jobs. Adjust as necessary. Comment out what you
  # don't need
  include:
    # Linux
    # - env: TARGET=aarch64-unknown-linux-gnu
    # - env: TARGET=arm-unknown-linux-gnueabi
    - env: TARGET=armv7-unknown-linux-gnueabihf
    - env: TARGET=i686-unknown-linux-gnu
    # - env: TARGET=i686-unknown-linux-musl
    # - env: TARGET=mips-unknown-linux-gnu
    # - env: TARGET=mips64-unknown-linux-gnuabi64
    # - env: TARGET=mips64el-unknown-linux-gnuabi64
    # - env: TARGET=mipsel-unknown-linux-gnu
    # - env: TARGET=powerpc-unknown-linux-gnu
    # - env: TARGET=powerpc64-unknown-linux-gnu
    # - env: TARGET=powerpc64le-unknown-linux-gnu
    # - env: TARGET=s390x-unknown-linux-gnu DISABLE_TESTS=1
    - env: TARGET=x86_64-unknown-linux-gnu
    # - env: TARGET=x86_64-unknown-linux-musl

    # OSX
    - env: TARGET=i686-apple-darwin
      os: osx
    - env: TARGET=x86_64-apple-darwin
      os: osx

    # Windows
    - env: TARGET=x86_64-pc-windows-gnu

before_install:
  - set -e
  - rustup self update

install:
  - sh ci/install.sh
  - source ~/.cargo/env || true

script:
  - bash ci/script.sh

after_script: set +e

before_deploy:
  - sh ci/before_deploy.sh

deploy:
  # TODO update `api_key.secure`
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it: `travis encrypt 0123456789012345678901234567890123456789
  # - Paste the output down here
  api_key:
    secure: "FTtPr3Oy+L3YEjUR03hIzfQTgCNkZS0R2KTvl9tnSeGVpTpgjvGkj0sEkjT+a3WlLGOpoa/ysi6EXJtG+MVncEid5regQYIkCYZHnQUOVwILCOWVT3bz+JZTbrVCld0qEkO48Ax5T2NBsi+0zbo+IuvMEfHvgH835vUYirtgXC6tm8WnhDJAXXQONLK7w2QOO5RL3EWszkieM2Y9Njj6Wv1drNj/VPQQNQN3wlKiHWCH1I/Ee7bptm+EXIqOw6NFNqpuHEo+MGogYekld0VResnu2TYtm0NN2OEt4Da3jCHXL+ECF0+RZC5J8BTV4ZEVjbFkzpBXaWzVQkzFtose+JmKFyb/aEtpxYwmh1BQ77aU3OPTr7vZx/bcREJ7BxIlLXPQX0PVX0AUEyOc3k3Cz63qCKIl6LQGkITvRfPsF7J1yhQOwuhAXdciTVoffYqMmq+61w04LQ8xpy0GP9HVmKlwZ9iqZasDscyik1ZiRwQY+DCV+xPgRayTKtBJVhjg3ohQgVOlwuWg0/wHN8A8evR+8ig3DV4CnKoKUjpuvZujsXGDyzmGnYcaPRpdksyCXt4TjWVX0RzyO49JmkKApJF5HWEoT/kgkUBcyKSMRwHjkm2Hp6HbHAsl/VT1txeE5KbQveyvBKkfYopr0Sr2Dj8wPv4GNuFZxnsEOda4Ips="
  file_glob: true
  file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
  on:
    # TODO Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    condition: $TRAVIS_RUST_VERSION = stable
    tags: true
  provider: releases
  skip_cleanup: true

cache: cargo
before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - main

notifications:
  email:
    on_success: never
